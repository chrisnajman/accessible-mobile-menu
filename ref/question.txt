I have a question about web accessibility for screen reader users.

Given this CSS:

```CSS

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: clip;
    clip-path: inset(0);
    border: 0;
}

```

and this HTML:

```HTML

<nav aria-label="main menu" class="visually-hidden">
    <ul>
        <li><a class="current-page" href=#">Home</a></li>
        <li><a href="#">Projects</a></li>
        <li><a href="#">Blog</a></li>
        <li><a href="#">About</a></li>
        <li><a href="#">Contact</a></li>
    </ul>
</nav>
```

Will a screen reader user be able to click on / interact with the links?



Following on from our previous chat, create a readme file in markdown using the Git Hub markdown format.

Base the readme on the following HTML, CSS and JavaScript:

```HTML
<div id="primary-navigation" class="primary-navigation padding">
    <div class="hamburger-button-wrapper">
        <h2>Menu</h2>
        <button class="hamburger-button" id="hamburger-button" aria-controls="site-navigation"
            aria-expanded="false">
            <svg class="lines" viewBox="0 0 100 100">
                <rect class="line top" x="10" y="28" rx="5"></rect>
                <rect class="line middle" x="10" y="47" rx="5"></rect>
                <rect class="line bottom" x="10" y="68" rx="5"></rect>
            </svg>
        </button>
    </div>

    <nav aria-label="main menu" id="site-navigation" class="menu-hidden">
        <ul>
            <li><a class="current-page" href="#home">Home</a></li>
            <li><a href="#projects">Projects</a></li>
            <li><a href="#blog">Blog</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact</a></li>
        </ul>
    </nav>
</div>
```

```CSS
:root {
    --animation-timing: 200ms;
}

.primary-navigation {
    position: relative;
    width: 100%;

    &.padding {
        padding-block-end: 1.8rem;
    }

    & nav {
        width: fit-content;
        margin: 0 auto;
        @media screen and (width <= 768px) {
            flex-direction: column;
            margin: 0 auto 0 2rem;
        }
    }

    & ul {
        list-style: none;
        padding-left: 0;
        display: flex;
        gap: 2rem;
        align-items: baseline;

        @media screen and (width <= 768px) {
            flex-direction: column;
        }
    }
    & a {
        text-decoration: none;
        color: var(--clr-lightest);
        border-bottom: 5px solid transparent;
        padding-block-end: 0.5rem;
        margin-bottom: 1rem;

        &:hover {
            border-bottom-color: var(--clr-lightest);
        }

        &.current-page,
        &.current-page:hover {
            text-decoration: none;
            cursor: default;
            border-bottom-color: var(--clr-lightest);
            font-weight: 600;
        }
    }

    @media screen and (width <= 768px) {
        max-width: 100%;
        margin: 0;
    }
}

.hamburger-button-wrapper {
    display: none;
}

@media screen and (width <= 768px) {
    .hamburger-button-wrapper {
        width: fit-content;
        display: flex;
        gap: 1rem;
        align-items: center;
        margin: 0 auto;
        position: absolute;
        top: -1.2rem;
        right: 2rem;

        & h2 {
            font-size: 1.6rem;
            font-weight: normal;
            margin-bottom: 1rem;
        }
    }

    .hamburger-button {
        cursor: pointer;
        width: 5rem;

        & .line {
            width: 80%;
            height: 1rem;
            fill: var(--hamburger-line-colour);
            transition:
                y var(--animation-timing) ease-in var(--animation-timing),
                rotate var(--animation-timing) ease-in,
                opacity 0ms var(--animation-timing);
            transform-origin: center;
        }

        &[aria-expanded="true"] .line {
            transition:
                y var(--animation-timing) ease-in,
                rotate var(--animation-timing) ease-in var(--animation-timing),
                opacity 0ms var(--animation-timing);
        }
        &[aria-expanded="true"] :is(.top, .bottom) {
            y: 47;
        }
        &[aria-expanded="true"] .top {
            rotate: 45deg;
        }
        &[aria-expanded="true"] .bottom {
            rotate: -45deg;
        }
        &[aria-expanded="true"] .middle {
            opacity: 0;
        }
    }

    .menu-hidden {
        position: absolute;
        width: 1px;
        height: 1px;
        margin: -1px;
        overflow: clip;
        clip-path: inset(0);
        border: 0;
        opacity: 0;
    }
    .menu-visible {
        position: static;
        width: auto;
        height: auto;
        margin: inherit;
        overflow: visible;
        clip-path: none;
        transition: opacity var(--animation-timing) var(--animation-timing) ease-in;
    }
}

```

```JAVASCRIPT
function btnHamburger() {
  const hamburgerButton = document.getElementById("hamburger-button")
  const primaryNavigation = document.getElementById("primary-navigation")
  const siteNavigation = document.getElementById("site-navigation")

  hamburgerButton.addEventListener("click", () => {
    const isExpanded = hamburgerButton.getAttribute("aria-expanded")
    isExpanded === "false"
      ? hamburgerButton.setAttribute("aria-expanded", "true")
      : hamburgerButton.setAttribute("aria-expanded", "false")
    siteNavigation.classList.toggle("menu-hidden")
    siteNavigation.classList.toggle("menu-visible")
    primaryNavigation.classList.toggle("padding")
  })
}
btnHamburger()
```
The hamburger menu button appears at screens less than 768px wide. At this point the menu itself is hidden and is brought into view by clicking the button.
Describe how the menu is accessible to screen readers and keyboard users even when it is not visible.
Also mention the various 'aria-' attributes.